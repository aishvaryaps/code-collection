AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: VPC with NatGateway and EIP

Globals:
  Function:
    Timeout: 3

# This CloudFormation template deploys a basic VPC / Network. 
Resources:
  # First, a VPC:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub vpc-${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]           
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A  

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]     
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public        

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicRoute1:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway              

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private

  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateRoute1:            
  # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    DependsOn: NATGateway 
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub nat-${AWS::StackName}

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC  
      
  SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal Group for Lambda
      VpcId: !Ref VPC

  SGBaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !GetAtt SecurityGroup.GroupId
        IpProtocol: '-1'
        SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  TestNatIPFn:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: test-code
      CodeUri: test-code/
      Handler: index.handler
      Runtime: nodejs12.x
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA

Outputs:
  StaticIP:
    Description: "Static IP for Nat Gateway"
    Value: !Ref ElasticIPAddress

    